/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-01 05:38:39 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class data1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"resources/js/jquery-3.6.0.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t$(function() {\r\n");
      out.write("\t\t$('#b2').click(function() {\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl: \"resources/data/MOCK_DATA.json\",\r\n");
      out.write("\t\t\t\tsuccess: function(json) {\r\n");
      out.write("\t\t\t\t\talert('json연결 성공.!!!==>  '+ json.length)\r\n");
      out.write("\t\t\t\t\t//alert(json[0].id)\r\n");
      out.write("\t\t\t\t\t$(json).each(function(index, person) { //파라메터 이름 마음대로\r\n");
      out.write("\t\t\t\t\t\tid = person.id\r\n");
      out.write("\t\t\t\t\t\tfirst_name = person.first_name\r\n");
      out.write("\t\t\t\t\t\tlast_name = person.last_name\r\n");
      out.write("\t\t\t\t\t\temail = person.email\r\n");
      out.write("\t\t\t\t\t\tgender = person.gender\r\n");
      out.write("\t\t\t\t\t\tphone = person.phone\r\n");
      out.write("\t\t\t\t\t\tconsole.log(id, first_name, last_name, email, gender, phone)\r\n");
      out.write("\t\t\t\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\t\t\t\turl: \"insertperson2\",\r\n");
      out.write("\t\t\t\t\t\t\tasync: false, \r\n");
      out.write("\t\t\t\t\t\t\tdata : {\r\n");
      out.write("\t\t\t\t\t\t\t\tID : id,\r\n");
      out.write("\t\t\t\t\t\t\t\tFIRST_NAME : first_name,\r\n");
      out.write("\t\t\t\t\t\t\t\tLAST_NAME : last_name,\r\n");
      out.write("\t\t\t\t\t\t\t\tEMAIL : email,\r\n");
      out.write("\t\t\t\t\t\t\t\tGENDER : gender,\r\n");
      out.write("\t\t\t\t\t\t\t\tPHONE : phone\r\n");
      out.write("\t\t\t\t\t\t\t}, \r\n");
      out.write("\t\t\t\t\t\t\tsuccess: function(result) {\r\n");
      out.write("\t\t\t\t\t\t\t\tconsole.log(result)\r\n");
      out.write("\t\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t} //success\r\n");
      out.write("\t\t\t}) //ajax\n");
      out.write("\t\t})//b1\r\n");
      out.write("\t\t$('#b1').click(function() {\n");
      out.write("\t\t\t$.ajax({\r\n");
      out.write("\t\t\t\turl: \"resources/data/dataset.xml\",\r\n");
      out.write("\t\t\t\tsuccess: function(xml) {\r\n");
      out.write("\t\t\t\t\talert('xml연결 성공.!!!')\r\n");
      out.write("\t\t\t\t\tlist = $(xml).find('record')\r\n");
      out.write("\t\t\t\t\tconsole.log('레코드의 개수=> ' + list.length)\r\n");
      out.write("\t\t\t\t\t/* console.log($(list[0]).find('id').text())\r\n");
      out.write("\t\t\t\t\tconsole.log($(list[0]).find('last_name').text())\r\n");
      out.write("\t\t\t\t\tconsole.log($(list[0]).find('gender').text())\r\n");
      out.write("\t\t\t\t\tconsole.log($(list[0]).find('phone').text()) */\r\n");
      out.write("\t\t\t\t\t//last_name, gender, phone\r\n");
      out.write("\t\t\t\t\t//for문 이용해서 전체 1000개를 프린트!\r\n");
      out.write("/* \t\t\t\t\tfor (var i = 0; i < list.length; i++) {\r\n");
      out.write("\t\t\t\t\t\tconsole.log($(list[i]).find('id').text())\r\n");
      out.write("\t\t\t\t\t\tconsole.log($(list[i]).find('last_name').text())\r\n");
      out.write("\t\t\t\t\t\tconsole.log($(list[i]).find('gender').text())\r\n");
      out.write("\t\t\t\t\t\tconsole.log($(list[i]).find('phone').text())\r\n");
      out.write("\t\t\t\t\t} */\r\n");
      out.write("\t\t\t\t\t$(list).each(function(index, record) {\r\n");
      out.write("\t\t\t\t\t\tconsole.log(index + \": \" + $(record).find('phone').text())\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t} //success\r\n");
      out.write("\t\t\t}) //ajax\n");
      out.write("\t\t})//b1\r\n");
      out.write("\t})//$fun\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<button id=\"b1\">XML문서 받아오기</button>\r\n");
      out.write("<button id=\"b2\">JSON문서 받아오기</button>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
