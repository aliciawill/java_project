/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.63
 * Generated at: 2021-04-09 08:16:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class kakao_005flogin2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\t<html>\r\n");
      out.write("<!-- 소셜로그인 javascript-->\r\n");
      out.write("<script src=\"//developers.kakao.com/sdk/js/kakao.min.js\"></script>\r\n");
      out.write("<body>\r\n");
      out.write("<center>\r\n");
      out.write("\t<a id=\"kakao-login-btn\"></a>\r\n");
      out.write("</center>\r\n");
      out.write("<script type='text/javascript'>\r\n");
      out.write("\tKakao.init('aa598f4adfb9e7e766be17ee75543c48'); //아까 카카오개발자홈페이지에서 발급받은 자바스크립트 키를 입력함\r\n");
      out.write("\t//카카오 로그인 버튼을 생성합니다.\r\n");
      out.write("\t\r\n");
      out.write("\tKakao.Auth.createLoginButton({\r\n");
      out.write("\t\tcontainer : '#kakao-login-btn',\r\n");
      out.write("\t\tsuccess : function(authObj) {\r\n");
      out.write("\t\t\t//alert(authObj)\t\t\t\r\n");
      out.write("\t\t\tKakao.API.request({\r\n");
      out.write("\t\t\t\turl : '/v2/user/me',\r\n");
      out.write("\t\t\t\tsuccess : function(res) {\r\n");
      out.write("\t\t\t\t\tconsole.log(JSON.stringify(res))\r\n");
      out.write("\t\t\t\t\tconsole.log(res);\r\n");
      out.write("\t\t\t\t/* \tconsole.log(res.properties['account_email']);//<---- 콘솔 로그에 닉네임 출력(properties에 있는 nickname 접근\r\n");
      out.write("\t\t\t\t\tvar kakaoid = res.id\r\n");
      out.write("\t\t\t\t\tvar kakaonickname = res.properties.nickname//으로도 접근 가능\r\n");
      out.write("\t\t\t\t\tvar token = authObj.access_token\r\n");
      out.write("\t\t\t\t\tconsole.log(kakaonickname)\r\n");
      out.write("\t\t\t\t\tconsole.log(authObj.access_token);/ */\r\n");
      out.write("\t\t\t\t\t//$('#kakaoNickName').text(res.properties.nickname)\r\n");
      out.write("\t\t\t\t\t//window.location.replace(\"http://\" + window.location.hostname + ( (location.port==\"\"||location.port==undefined)?\"\":\":\" + location.port) + \"/kakaoCheck.jsp?id=\"+kakaonickname);\r\n");
      out.write("\t\t\t\t\t/* window.location.replace(\"kakaoCheck.jsp?id=\"\r\n");
      out.write("\t\t\t\t\t+ kakaonickname + \"&kakaoid=\" + kakaoid); //로그인 성공시 이동페이지 */\r\n");
      out.write("\t\t\t\t\t// 마이페이지 기능을 사용하기 위해서는 db연동이 필요함???\r\n");
      out.write("\t\t\t\t\t//window.location.replace(\"loginCheck.jsp?id=\"+kakaonickname+\"token=\"+token);\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t\t})\r\n");
      out.write("\t\t\t\t\t},\r\n");
      out.write("\t\tfail : function(error) {\r\n");
      out.write("\t\t\talert(error)\r\n");
      out.write("\t\t\t//alert(‎JSON.stringify(error));\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("// SDK 초기화 여부를 판단합니다.\r\n");
      out.write("console.log(Kakao.isInitialized());\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
